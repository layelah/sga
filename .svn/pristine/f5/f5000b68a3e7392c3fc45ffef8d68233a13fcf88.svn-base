package com.cmu.agence.rh.bean;

import com.cmu.agence.rh.domaine.Absence;
import com.cmu.agence.rh.domaine.AbsenceEnum;
import com.cmu.agence.rh.domaine.CongesNonDeductible;
import com.cmu.agence.rh.domaine.DemandePermissionAbsence;
import com.cmu.agence.rh.domaine.EtatAbsenceEnum;
import com.cmu.agence.rh.domaine.EtatValidationEnum;
import com.cmu.agence.rh.domaine.NiveauValidationDemandeEnum;
import com.cmu.agence.rh.domaine.ParametreMail;
import com.cmu.agence.rh.domaine.SoldeConges;
import com.cmu.agence.rh.domaine.ValidationDemande;
import com.cmu.agence.rh.service.AbsenceService;
import com.cmu.agence.rh.service.NotifService;
import com.cmu.agence.rh.service.SoldeCongesService;
import com.cmu.base.bean.BaseCRUDBean;
import com.cmu.base.bean.JsfUtil;
import com.cmu.base.domaine.BaseDomaine;
import com.cmu.base.service.BaseService;
import com.cmu.base.service.exception.CMUServiceException;
import com.cmu.base.service.exception.EchecSelectException;
import com.cmu.sigicmu.admin.domaine.Agent;
import com.cmu.sigicmu.bureau.bean.AuthentificationBean;
import com.cmu.sigicmu.param.domaine.TableValeur;
import com.cmu.sigicmu.param.domaine.TableValeurTypeEnum;
import com.cmu.sigicmu.param.domaine.WebRacineEnum;
import com.cmu.sigicmu.param.service.TableValeurService;
import com.cmu.util.JIDate;
import com.cmu.mail.JMailNotifDemAgent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.servlet.http.Part;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.primefaces.model.UploadedFile;
import com.cmu.util.JIDate;
import java.awt.Toolkit;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.faces.application.FacesMessage;  
import javax.faces.bean.ManagedBean;  
import javax.faces.context.FacesContext;  

@Named("demAbsence")
@SessionScoped
public class DemAbsenceBean extends BaseCRUDBean {

    @Inject
    AuthentificationBean auth;
    
    @EJB
    TableValeurService tvSrv;

    @EJB
    AbsenceService srv;

    @EJB
    SoldeCongesService srvSoldeConges;
    
    @EJB
    NotifService srvNotif;
    
    //SoldeConges scAgent;
    
     
    
    private DemAbsenceExcepBean absExcep;
    
    /************************/
   
    private UploadedFile file;
    //private UploadedFile fileExcep;
    /*****************************/
    
    /*****Prise en charge des conges demi-journée*******************/
    private String moment_deb;
    private String moment_fin;
    
    private int nbJourNonDeduc;
    private Boolean showAlert = false;
    private String messageAlert = "";
    
    
    /*****************************/

    private SoldeConges scAvant;
    private SoldeConges scApres;

    public DemAbsenceBean() {
        super(WebRacineEnum.RH, "demAbsence");
    }

    @Override
    public BaseService getService() {
        return srv;
    }

    @Override
    public BaseDomaine getNewInstance() {
        scAvant = new SoldeConges();
        scApres = new SoldeConges();
        absExcep = new DemAbsenceExcepBean();
        return new DemandePermissionAbsence();
    }
    
    
    public String goDemPermission() {
        try {
            initObj();
        } catch (EchecSelectException ex) {
            JsfUtil.addErrorMessage("Il n'a pas été possible d'afficher le formulaire de demande de permission");
            return null;
        }
        return "/RH/demPermissionForm.xhtml";
    }

    public String goDemAbsence() {
        try {
            initObj();
        } catch (EchecSelectException ex) {
            JsfUtil.addErrorMessage("Il n'a pas été possible d'afficher le formulaire de demande de permission");
            return null;
        }
        return "/RH/demAbsenceForm.xhtml";
    }
    
    public String goDemAbsenceExcep() {
        try {
            initObj();
        } catch (EchecSelectException ex) {
            JsfUtil.addErrorMessage("Il n'a pas été possible d'afficher le formulaire de demande d'absence exceptionnelle");
            return null;
        }
        return "/RH/demAbsenceExcepForm.xhtml";
    }

    public String enregistrerPermission() {
        
       
        //Absence abs;
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;

        // Contrôles des données
        if (JIDate.avantAujourdhui(m_obj.getAbsence().getDateDebutAbsence())) {
            JsfUtil.addErrorMessage("date_debut", "La date de début du congès doit être postérieure à la date du jour");
            return null;
        }

        if (JIDate.avantJour(m_obj.getAbsence().getDateFinAbsence(), m_obj.getAbsence().getDateDebutAbsence())) {
            JsfUtil.addErrorMessage("date_fin", "La date de fin de permission congès doit être postérieure à la date de début");
            return null;
        }
        
        if (JIDate.nbJourOuvrable(m_obj.getAbsence().getDateDebutAbsence(), m_obj.getAbsence().getDateFinAbsence()) == 0) {
            JsfUtil.addErrorMessage("weekend", "La demande correspond à un jour de weekend");
            return null;
        }

        // Calcul des jours de congés
        ajaxCalculDate(m_obj.getAbsence());
        
        // Enregistrement de la demande d'absence
        try {
            TableValeur nivValidation;
            TableValeur etatDemande = tvSrv.getRef(TableValeurTypeEnum.EtatValidation, EtatValidationEnum.Encours.toString());
            TableValeur typeAbsence = tvSrv.getRef(TableValeurTypeEnum.TypeAbsence, AbsenceEnum.PermAbsNonDeducConge.toString());
            TableValeur etatAbsence = tvSrv.getRef(TableValeurTypeEnum.EtatAbsence, EtatAbsenceEnum.Cree.toString());
        
            // Information sur la demande d'absence
            m_obj.getAbsence().setDemandePermissionAbsence(m_obj);
            m_obj.getAbsence().setTypeAbsence(typeAbsence);
            m_obj.getAbsence().setEtat(etatAbsence);
            m_obj.getAbsence().setMotif(m_obj.getAbsence().getCongesNonDeductible().getLib());
            m_obj.setEtat(etatDemande);
            m_obj.setDateDemande(JIDate.now());
            
            // Sauvegarde de la demande (Absence, DemandePermissionAbsence, ValidationDemande)
            m_obj.setAbsence((Absence) srv.save(m_obj.getAbsence()));
//            
      

        } catch (CMUServiceException ex) {
            JsfUtil.addErrorMessage("Une erreur est survenue lors de l'enregistrement de la demande");
            return null;
        }catch (Exception ex) {
            Logger.getLogger(DemAbsenceBean.class.getName()).log(Level.SEVERE, null, ex);
        }

        return "/RH/demandeAbsenceList.xhtml";
    }

    public boolean yaErreurDansFormAbsence(DemandePermissionAbsence m_obj) {
        boolean yaErreur = false;
        
        if (JIDate.avantAujourdhui(m_obj.getAbsence().getDateDebutAbsence())) {
            JsfUtil.addErrorMessage("date_debut", "La date de début du congès doit être postérieure à la date du jour");
            yaErreur = true;
        }
    

        if (JIDate.nbJourOuvrable(m_obj.getAbsence().getDateDebutAbsence(), m_obj.getAbsence().getDateFinAbsence()) == 0) {
            JsfUtil.addErrorMessage("weekend", "La demande correspond à un jour de weekend");
            yaErreur = true;
        }
        
        if (scApres.getNbCongesReliquat() < 0) {
            JsfUtil.addErrorMessage("date_debut", "Le nombre de jour de congés demandé dépasse votre reliquat");
            yaErreur = true;
        }

        return yaErreur;        
    }
    
    public String enregistrerAbsence() {
     
    //AbsenceExceptionnelle absExcep;
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        
        // Contrôles des dates données
        if (yaErreurDansFormAbsence(m_obj)) {
            return null;
        }
 
        // Calcul des jours d'absence
        ajaxCalculDateNbj(m_obj.getAbsence());
    
        // Enregistrement de la demande d'absence
       
        try {
            TableValeur nivValidation;
            TableValeur etatDemande = tvSrv.getRef(TableValeurTypeEnum.EtatValidation, EtatValidationEnum.Encours.toString());
            TableValeur typeAbsence = tvSrv.getRef(TableValeurTypeEnum.TypeAbsence, AbsenceEnum.PermAbsDeducConge.toString());
            TableValeur etatAbsence = tvSrv.getRef(TableValeurTypeEnum.EtatAbsence, EtatAbsenceEnum.Cree.toString());
        
            // Information sur la demande d'absence
            m_obj.getAbsence().setDemandePermissionAbsence(m_obj);
            m_obj.getAbsence().setTypeAbsence(typeAbsence);
            m_obj.getAbsence().setEtat(etatAbsence);
       
            m_obj.setEtat(etatDemande);
            m_obj.setDateDemande(JIDate.now());
            
            //Mise à jour des heures de depart et d'arrivée de l'absence

              m_obj.getAbsence().setMomentDepart(this.moment_deb);
              m_obj.getAbsence().setMomentFin(this.moment_fin);
             
              /************************************USE CASE 2**************/      
           int nbrj=0;   
           List <Absence> nbr = srv.getNbJourNonDeduc( m_obj.getAbsence().getDateDebutAbsence(), m_obj.getAbsence().getDateFinAbsence(), m_obj.getAbsence().getAgent().getId());
            //Absence nbr = srv.getNbJourNonDeduc(absence.getDateDebutAbsence(), absence.getDateFinAbsence(), 7496);
            System.out.println("Id Agent:"+ m_obj.getAbsence().getAgent().getId());
           for(int i = 0 ; i < nbr.size(); i++){
              
               nbrj+=nbr.get(i).getNbJourNonDeductible();
           }
            
           String mess="";
            this.setNbJourNonDeduc(nbrj);
            
            
            if(this.getNbJourNonDeduc() > 0){
      
                Double newValue = m_obj.getAbsence().getNbJourDeductible() - nbrj;
                mess="En cette periode, L'agent a déjâ demandé "+ nbrj+" jour(s) de congés non déductibles. \n"
                + " Donc son compteur de congés sera déduit de  "+newValue + " jours au lieu de "+ m_obj.getAbsence().getNbJourDeductible()+" jour(s)";

            }else{
                mess="";
                
            }
        
            m_obj.getAbsence().setRemarque(mess);  
            
            scApres.setNbCongesEchus(scAvant.getNbCongesEchus() - m_obj.getAbsence().getNbJourDeductible() + this.getNbJourNonDeduc());
            scApres.setNbJourPris(scAvant.getNbJourPris() + m_obj.getAbsence().getNbJourDeductible() - this.getNbJourNonDeduc());
            scApres.setNbCongesReliquat(scApres.getNbCongesAcquis() - scApres.getNbJourPris());
            
           
 
//            if (this.getFile().getFileName().equalsIgnoreCase("")){
//                System.out.println("Pas de fichier joint");
//            
//            }else{
//                System.out.println("fichier joint existant");
//                //m_obj.getAbsence().setCheminFileUploaded("/Users/issathiam/NetBeansProjects/CMU_DEV/sources/src/main/webapp/resources/piecesJointes");
//                m_obj.getAbsence().setCheminFileUploaded("/home/srvdebian/deploiement/SGA_V3/resources/fichiersJoints");
//                String chemin = m_obj.getAbsence().getCheminFileUploaded();
//                String nomFichier = this.save(this.getFile(), chemin);
//                m_obj.getAbsence().setFileUploaded(nomFichier);
//                
//                System.out.println("Nom FIle: "+ nomFichier);
//                System.out.println("Chemn File: "+ chemin);
//                
//            }
           
           if (scApres.getNbCongesEchus() < 0) {
               System.out.println("Non ENregistrement absence");
            }else{
            
               
                m_obj.getAbsence().setNbJourDeductible(m_obj.getAbsence().getNbJourDeductible() - nbrj);
                System.out.println("Nbr de jour deductible: "+ m_obj.getAbsence().getNbJourDeductible());
                m_obj.setAbsence((Absence) srv.save(m_obj.getAbsence()));
            }
           

        } catch (CMUServiceException ex) {
            JsfUtil.addErrorMessage("Une erreur est survenue lors de l'enregistrement de la demande");
            return null;
        
        } catch (Exception ex) {
            Logger.getLogger(DemAbsenceBean.class.getName()).log(Level.SEVERE, null, ex);
        }
//        catch (Exception ex) {
//            Logger.getLogger(DemAbsenceBean.class.getName()).log(Level.SEVERE, null, ex);
//        }

        return "/RH/demandeAbsenceList.xhtml";
    }

    
    public String enregistrerAbsExcep() {
              
        //AbsenceExceptionnelle absExcep;
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;

        if (JIDate.nbJourOuvrable(m_obj.getAbsence().getDateDebutAbsence(), m_obj.getAbsence().getDateFinAbsence()) == 0) {
            JsfUtil.addErrorMessage("weekend", "La demande correspond à un jour de weekend");
            return null;
        }
 
        // Calcul des jours d'absence
        ajaxCalculDateNbjExcep(m_obj.getAbsence());
        
        // Enregistrement de la demande d'absence
        try {
            TableValeur nivValidation;
            TableValeur etatDemande = tvSrv.getRef(TableValeurTypeEnum.EtatValidation, EtatValidationEnum.Encours.toString());
            TableValeur typeAbsence = tvSrv.getRef(TableValeurTypeEnum.TypeAbsence, AbsenceEnum.PermAbsNonDeducConge.toString());
            TableValeur etatAbsence = tvSrv.getRef(TableValeurTypeEnum.EtatAbsence, EtatAbsenceEnum.Cree.toString());
        
            // Information sur la demande d'absence
            m_obj.getAbsence().setDemandePermissionAbsence(m_obj);
            m_obj.getAbsence().setTypeAbsence(typeAbsence);
            m_obj.getAbsence().setEtat(etatAbsence);
            m_obj.getAbsence().setMotif(m_obj.getAbsence().getCongesNonDeductible().getLib());
            m_obj.setEtat(etatDemande);
            m_obj.setDateDemande(JIDate.now());

              m_obj.getAbsence().setMomentDepart(this.moment_deb);
              m_obj.getAbsence().setMomentFin(this.moment_fin);
             
             
//        /******Deduction du nbre de jours deductible en cas
//         demande d'absence deductible dans une periode
//         * ou il y'a une absence non deductible ****/      
//           int nbrj=0;   
//           List <Absence> nbr = srv.getNbJourNonDeduc( m_obj.getAbsence().getDateDebutAbsence(), m_obj.getAbsence().getDateFinAbsence(), m_obj.getAbsence().getAgent().getId());
//            System.out.println("Id Agent:"+ m_obj.getAbsence().getAgent().getId());
//           for(int i = 0 ; i < nbr.size(); i++){
//              
//               nbrj+=nbr.get(i).getNbJourNonDeductible();
//           }         
//           String mess="";
//            this.setNbJourNonDeduc(nbrj);  
//            if(this.getNbJourNonDeduc() > 0){
//                Double newValue = m_obj.getAbsence().getNbJourDeductible() - nbrj;
//                mess="En cette periode, L'agent a déjâ demandé "+ nbrj+" jour(s) de congés non déductibles. \n"
//                + " Donc son compteur de congés sera déduit de  "+newValue + " jours au lieu de "+ m_obj.getAbsence().getNbJourDeductible()+" jour(s)";             
//            }else{
//                mess="";
//            }
//        
//            m_obj.getAbsence().setRemarque(mess);
//            
//            scApres.setNbCongesEchus(scAvant.getNbCongesEchus() - m_obj.getAbsence().getNbJourDeductible() + this.getNbJourNonDeduc());
//            scApres.setNbJourPris(scAvant.getNbJourPris() + m_obj.getAbsence().getNbJourDeductible() - this.getNbJourNonDeduc());
//            scApres.setNbCongesReliquat(scApres.getNbCongesAcquis() - scApres.getNbJourPris());
//            
//        //Mis a jour du nombre de jours deductibles   
//            m_obj.getAbsence().setNbJourDeductible(m_obj.getAbsence().getNbJourDeductible() - nbrj);
        /**************************************************************************/
        
            if (this.getFile().getFileName().equalsIgnoreCase("")){
                System.out.println("Pas de fichier joint");
            
            }else{
                System.out.println("fichier joint existant");
                //m_obj.getAbsence().setCheminFileUploaded("/Users/issathiam/NetBeansProjects/SGA/sources/src/main/webapp/resources/piecesJointes");
                  m_obj.getAbsence().setCheminFileUploaded("/home/srvdebian/deploiement/SGA_V3/resources/fichiersJoints");
                String chemin = m_obj.getAbsence().getCheminFileUploaded();
                String nomFichier = this.save(this.getFile(), chemin);
                m_obj.getAbsence().setFileUploaded(nomFichier);
            }
                 
//           if (scApres.getNbCongesEchus() < 0) {
//            JsfUtil.addErrorMessage("date_debut", "Le nombre de jour de congés demandé dépasse votre reliquat");
// 
//            }else{
 
                m_obj.setAbsence((Absence) srv.save(m_obj.getAbsence()));
 //           }
            
        } catch (CMUServiceException ex) {
            JsfUtil.addErrorMessage("Une erreur est survenue lors de l'enregistrement de la demande");
            return null;
        } catch (IOException ex) {
            Logger.getLogger(DemAbsenceBean.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DemAbsenceBean.class.getName()).log(Level.SEVERE, null, ex);
        }

        return "/RH/demandeAbsenceList.xhtml";
    }

    public void ajaxGetNbJourNonDeductible(CongesNonDeductible congNonDeduc) {
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        m_obj.getAbsence().setNbJourNonDeductible(congNonDeduc.getNbJourConges());
        
        if (JIDate.estVide(m_obj.getAbsence().getDateDebutAbsence())) {
            m_obj.getAbsence().setDateDebutAbsence(JIDate.dateDuJourSansHeure());
        }

        if (JIDate.estVide(m_obj.getAbsence().getDateFinAbsence())) {
            m_obj.getAbsence().setDateFinAbsence(JIDate.ajouterJour(m_obj.getAbsence().getDateDebutAbsence(), (int) (m_obj.getAbsence().getNbJourNonDeductible() - 1)));
        }
        ajaxCalculDate(m_obj.getAbsence());
    }
    
    public void ajaxCalculDateNbj(Absence absence) {
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        Integer nbJourFerie = srv.getNbJourFerie(absence.getDateDebutAbsence(), absence.getDateFinAbsence());      
        //Vérification si une demi-journée est prise en compte
        if (estDemiJournee()){
           System.out.println("On est en demi journée et meme jour");
            if(absence.getDateDebutAbsence().equals(absence.getDateFinAbsence())){                
                m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  + 1.00 - 0.50);
                m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie));
                m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ));
            }else{
                
                if((this.getMoment_deb().equalsIgnoreCase("matin") && this.getMoment_fin().equalsIgnoreCase("apres_midi"))){
                    System.out.println("On est en demi journée et jour diff et deb matin et fin soir");
                    m_obj.getAbsence().setNbJourAbsence( (JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50) + 1);
                    m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie));
                    //m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
                    m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ));
                   
                }else{
                     System.out.println("On est en demi journée et jour diff et deb soir et fin matin");
                    m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50);
        
                    m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
                    m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie ));
                   
                }   
                
            }
            
        }else{
            System.out.println("On est pas en demi");
            m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) );
        
            m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00  - nbJourFerie);
            m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00 - nbJourFerie);
           
        }
       
        scApres.setNbCongesEchus(scAvant.getNbCongesEchus() - m_obj.getAbsence().getNbJourDeductible());
        scApres.setNbJourPris(scAvant.getNbJourPris() + m_obj.getAbsence().getNbJourDeductible());
        scApres.setNbCongesReliquat(scApres.getNbCongesAcquis() - scApres.getNbJourPris());
    }


    public void ajaxCalculDate(Absence absence) {
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        m_obj.getAbsence().setDateFinAbsence(JIDate.ajouterJour(m_obj.getAbsence().getDateDebutAbsence(), (int) (m_obj.getAbsence().getNbJourNonDeductible() - 1)));
        Integer nbJourFerie = srv.getNbJourFerie(absence.getDateDebutAbsence(), absence.getDateFinAbsence());
        m_obj.getAbsence().setNbJourAbsence((int) JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) + 1);

        if (JIDate.estVide(m_obj.getAbsence().getDateFinAbsence())) {
            JIDate.ajouterJour(m_obj.getAbsence().getDateDebutAbsence(), (int) (m_obj.getAbsence().getNbJourNonDeductible() - 1));
        }
        m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - nbJourFerie);
    }

    public void ajaxGetSoldeAgent(Agent agent) {
        SoldeConges soldeConges = srvSoldeConges.getSoldeConges(agent.getId());
        
        scAvant.setValeur(soldeConges);
        scApres.setValeur(soldeConges);
    }
    
//    public void ajaxCalculDateNbjExcep(Absence absence) {
//        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
//        Integer nbJourFerie = srv.getNbJourFerie(absence.getDateDebutAbsence(), absence.getDateFinAbsence());
//        
//        if(estDemiJournee()){
//            if(absence.getDateDebutAbsence().equals(absence.getDateFinAbsence())){
//                System.out.println("On est en demi journée et meme jour");
//                m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  + 1.00 - 0.50 );
//                m_obj.getAbsence().setNbJourExceptionnel(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie));
//                //m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie));
//                m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ) );
//               
//            }else{
//                
//                if((this.getMoment_deb().equalsIgnoreCase("matin") && this.getMoment_fin().equalsIgnoreCase("apres_midi"))){
//                    System.out.println("On est en demi journée et jour diff et deb matin et fin soir");
//                    m_obj.getAbsence().setNbJourAbsence( (JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50) );
//                    m_obj.getAbsence().setNbJourExceptionnel(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie) );
//                    //m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
//                    m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ) );
//                    
//                }else{
//                    System.out.println("On est en demi journée et jour diff et deb soir et fin matin");
//                    m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50 );
//                    m_obj.getAbsence().setNbJourExceptionnel(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
//                    //m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
//                    m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie ) );
//                   
//                }   
//            
//            }
//      
//        }else{
//            System.out.println("On est pas en demi");
//            m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  );
//            m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00 - nbJourFerie );
//            m_obj.getAbsence().setNbJourExceptionnel(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00  - nbJourFerie );
//  
//            scApres.setNbCongesEchus(scAvant.getNbCongesEchus() - m_obj.getAbsence().getNbJourDeductible());
//            scApres.setNbJourPris(scAvant.getNbJourPris() + m_obj.getAbsence().getNbJourDeductible());
//            scApres.setNbCongesReliquat(scApres.getNbCongesAcquis() - scApres.getNbJourPris());
//        }
//       
//    }
    
    public void ajaxCalculDateNbjExcep(Absence absence) {
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        Integer nbJourFerie = srv.getNbJourFerie(absence.getDateDebutAbsence(), absence.getDateFinAbsence());
        
        if(estDemiJournee()){
            if(absence.getDateDebutAbsence().equals(absence.getDateFinAbsence())){
                System.out.println("On est en demi journée et meme jour");
                m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  + 1.00 - 0.50);
                //m_obj.getAbsence().setNbJourNonDeductible((int) (JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie)));
                m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie));
                m_obj.getAbsence().setNbJourNonDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ) );
               
            }else{
                
                if((this.getMoment_deb().equalsIgnoreCase("matin") && this.getMoment_fin().equalsIgnoreCase("apres_midi"))){
                    System.out.println("On est en demi journée et jour diff et deb matin et fin soir");
                    m_obj.getAbsence().setNbJourAbsence( (JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50) + 1);
                    m_obj.getAbsence().setNbJourNonDeductible( (JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie)));
                    m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
                    //m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 0.50 - (nbJourFerie ) );
                    
                }else{
                    System.out.println("On est en demi journée et jour diff et deb soir et fin matin");
                    m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  - 0.50);
                    m_obj.getAbsence().setNbJourNonDeductible( (JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie)));
                    m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie));
                    //m_obj.getAbsence().setNbJourDeductible(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.50 - (nbJourFerie ) );
                   
                }   
            
            }
      
        }else{
            System.out.println("On est pas en demi");
            m_obj.getAbsence().setNbJourAbsence( JIDate.nbJour(absence.getDateDebutAbsence(), absence.getDateFinAbsence())  );
            m_obj.getAbsence().setNbJourNonDeductible( (JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00 - nbJourFerie));
            m_obj.getAbsence().setNbJourOuvrable(JIDate.nbJourOuvrable(absence.getDateDebutAbsence(), absence.getDateFinAbsence()) - 1.00  - nbJourFerie );
  
//            scApres.setNbCongesEchus(scAvant.getNbCongesEchus() - m_obj.getAbsence().getNbJourDeductible());
//            scApres.setNbJourPris(scAvant.getNbJourPris() + m_obj.getAbsence().getNbJourDeductible());
//            scApres.setNbCongesReliquat(scApres.getNbCongesAcquis() - scApres.getNbJourPris());
        }
       
    }

    public List getMesAbsenceList() throws EchecSelectException {
        return srv.listDemAbs(getAuth().getUser().getAgent());
    }
    
    public List getCongesExcepList() throws EchecSelectException {
        return srv.listAbsExcep();
    }
    
    public List getMesDemandesList() throws EchecSelectException {
        //
        return srv.listMesDemAbs(getAuth().getUser().getAgent(), getAuth().getUser().getId());
    }

    public SoldeConges getScAvant() {
        return scAvant;
    }

    public void setScAvant(SoldeConges scAvant) {
        this.scAvant = scAvant;
    }

    public SoldeConges getScApres() {
        return scApres;
    }

    public void setScApres(SoldeConges scApres) {
        this.scApres = scApres;
    }

    public DemAbsenceExcepBean getAbsExcep() {
        return absExcep;
    }

    public void setAbsExcep(DemAbsenceExcepBean absExcep) {
        this.absExcep = absExcep;
    }
    

    public UploadedFile getFile() {
        return file;
    }

    public void setFile(UploadedFile file) {
        this.file = file;
    }
    
    public String getMoment_deb() {
        return moment_deb;
    }

    public void setMoment_deb(String moment_deb) {
        this.moment_deb = moment_deb;
    }

    public String getMoment_fin() {
        return moment_fin;
    }

    public void setMoment_fin(String moment_fin) {
        this.moment_fin = moment_fin;
    }

    public int getNbJourNonDeduc() {
        return nbJourNonDeduc;
    }

    public void setNbJourNonDeduc(int nbJourNonDeduc) {
        this.nbJourNonDeduc = nbJourNonDeduc;
    }

    public String save(UploadedFile file, String filePath) throws IOException {
       
        String filename = FilenameUtils.getName(file.getFileName());
        InputStream input = file.getInputstream();
        OutputStream output = new FileOutputStream(new File(filePath, filename));
        
        try {
            IOUtils.copy(input, output);
        } finally {
            IOUtils.closeQuietly(input);
            IOUtils.closeQuietly(output);
        }
        
        return filename;
    }
    
    public boolean estDemiJournee(){
        return ((this.getMoment_deb().equalsIgnoreCase("matin") && this.getMoment_fin().equalsIgnoreCase("apres_midi")) || (this.getMoment_deb().equalsIgnoreCase("apres_midi") && this.getMoment_fin().equalsIgnoreCase("matin")));
    }
    
    public boolean estEtatCree(){
        DemandePermissionAbsence m_obj = (DemandePermissionAbsence) obj;
        return  (m_obj.getAbsence().getEtat().getLib().equals(EtatAbsenceEnum.Cree.toString()));
           
    }
    
    public void addMessage(String summary, String detail) {  
        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, summary, detail);  
        FacesContext.getCurrentInstance().addMessage(null, message);  
    }  
    
    
    
}
